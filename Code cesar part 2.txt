// C++ code
//
int key;
int operation;
void setup()
{
    Serial.begin(9600);

}

void loop()
{

if (Serial.available() > 0) {
    String Message = "";
    while (Serial.available() > 0) {
      char Charactere = Serial.read();
      Message += Charactere;
      delay(10);
 }
  if (Message.length() > 5) {
      if (Message[0] != '0' && Message[0] != '1') {
        Serial.println("Ecrivez 0 pour chiffrement ou 1 pour dechiffrement");
        	return 0;
      }

        int Arret = inputMessage.indexOf(',');
        int Arret2 = inputMessage.indexOf(',', Arret + 1);

    
      }

      String cleString = Message.substring(Arret + 1, Arret2);
      key = cleString.toInt();

      String Caractere = Message.substring(Arret2 + 1);

      operation = Message[0] - '0';

      if (operation == 0) {
        	chiffrement(key, Caractere);
      } else if (operation == 1) {
        	dechiffrement(key, Caractere);
      } 
  	}
}
  

void chiffrement(String message)
{
  for(int i=0;i<message.length();i++)
  {
	message[i] = 0; // caractère à lire
    int buff = Serial.available();
    while(buff > 0) // tant qu'il reste des caractères dans le buffer
    {
        message[i] = Serial.read(); // lecture du caractère
      	if(message[i]>=117)
        {
          message[i] = message[i] - 26;
        }
      	message[i] = message[i] + key;
        Serial.print(message[i]); // envoi du caractère
        buff = Serial.available(); // mise à jour du nombre de caratères restant
    }
  }
 }


void dechiffrement(String message)
{

  for(int i=0;i>message.length();i--)
  {
    message[i]= message[i]-key;
    message[i] = message[i] + 26;
  }
 	Serial.println(message);
}
